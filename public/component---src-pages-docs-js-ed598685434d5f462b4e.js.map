{"version":3,"sources":["webpack:///./src/components/whitelayout.js","webpack:///./src/pages/docs.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/seo.js"],"names":["WhiteLayout","_ref","children","react_default","a","createElement","Fragment","header","style","margin","maxWidth","padding","backgroundColor","color","boxShadow","propTypes","PropTypes","node","isRequired","DocsPage","whitelayout","seo","title","href","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","__webpack_exports__","React","createContext","object","string","func","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","gatsby__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","Header","marginBottom","textAlign","to","textDecoration","SEO","description","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","arrayOf"],"mappings":"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","file":"component---src-pages-docs-js-ed598685434d5f462b4e.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst WhiteLayout = ({ children }) => (\n  <>\n    <Header />\n    <div\n      style={{\n        margin: `0 auto 50px auto`,\n        maxWidth: 960,\n        padding: `1.45rem`,\n        backgroundColor: `#fff`,\n        color: `#000008`,\n        boxShadow: `0 0 10px rgba(0, 0, 0, 0.2)`,\n      }}\n    >\n      <main>{children}</main>\n    </div>\n  </>\n)\n\nWhiteLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default WhiteLayout\n","import React from 'react'\n\nimport WhiteLayout from '../components/whitelayout'\nimport SEO from '../components/seo'\n\nconst DocsPage = () => (\n  <WhiteLayout>\n    <SEO title=\"Documentation\" />\n    <h1>Hiome API Documentation</h1>\n\n    <p>\n      Hiome Core manages all of your Hiome Door sensors and counts occupancy for every room. All of this data stays\n      locally within your home and can be accessed while you are on your local network.\n    </p>\n\n    <h2>API</h2>\n\n    <p>\n      You can get a list of all rooms configured in your home by doing a HTTP GET request\n      to <a href=\"http://hiome.local/api/1/rooms\">http://hiome.local/api/1/rooms</a>. This returns a JSON response\n      that looks like\n    </p>\n\n    <code><pre>\n    {'[{\"id\":\"1554713930\",\"name\":\"Bedroom\",\"occupancy_count\":0},{\"id\":\"1554713914\",\"name\":\"Living Room\",\"occupancy_count\":2}, ...]'}\n    </pre></code>\n\n    <h2>MQTT</h2>\n\n    <p>\n      You can also get notified whenever the occupancy count changes in a room by connecting to Hiome Core's\n      MQTT broker at <code>mqtt://hiome.local:1883</code>\n    </p>\n\n    <p>\n      Once connected, you can subscribe to <code>hiome/1/sensor/#</code> to get notifications for all sensors\n      configured with Hiome. Each room will publish to a topic like <code>hiome/1/sensor/room_id:occupancy</code>\n      with a payload like\n    </p>\n\n    <code><pre>\n    {'{\"meta\": {\"source\": \"gateway\", \"type\": \"occupancy\", \"room\": \"1554713914\", \"name\": \"Living Room Occupancy\"}, \"ts\": 1555619832.71695, \"val\": 2}'}\n    </pre></code>\n\n    <p>\n      The latest value is retained for each sensor topic, so whenever you subscribe, you will immediately get the\n      latest occupancy count for each room.\n    </p>\n\n    <p>Here's an example using the <a href=\"https://www.github.com/mqttjs/MQTT.js\">mqtt.js library</a>:</p>\n\n    <pre><code>\n    {'const mqtt = require(\"mqtt\")\\n'}\n    {'const client = mqtt.connect(\"mqtt://hiome.local:1883\")\\n'}\n    {'const rooms = {}\\n\\n'}\n\n    {'client.on(\"connect\", function() {\\n'}\n    {'  client.subscribe(\"hiome/1/sensor/#\", {qos: 1})\\n'}\n    {'})\\n\\n'}\n\n    {'client.on(\"message\", function(topic, msg, packet) {\\n'}\n    {'  const message = JSON.parse(msg)\\n'}\n    {'  if (message[\"meta\"][\"type\"] === \"occupancy\") {\\n'}\n    {'    rooms[message[\"meta\"][\"room\"]] = message[\"val\"]\\n'}\n    {'    console.log(message[\"meta\"][\"name\"] + \" is now \" + message[\"val\"])\\n'}\n    {'  }\\n'}\n    {'})\\n'}\n    </code></pre>\n\n    <h3>Subscribing</h3>\n\n    <p>\n      You must have a globally unique client ID when connecting to the MQTT broker. Your MQTT client library\n      should handle this, but if you want Hiome Core to queue messages for you while your script is disconnected\n      for whatever reason, then you'll need to specify your client ID and set the clean session flag to false\n      when connecting so that Hiome Core knows to continue your previous session. That client ID must remain consistent\n      in order to pick up your old session's queue of messages where it left off. I recommend using your MAC address as\n      your client ID.\n    </p>\n\n    <h3>Publishing</h3>\n\n    <p>\n      If you are making your own sensors and decide to publish events through Hiome Core, you'll need to make sure\n      your sensor has a globally unique ID. I recommend using a prefix like \"mydevice:1\" to guarantee you\n      don't conflict with another sensor.\n    </p>\n\n    <h2>Versioning</h2>\n\n    <p>\n      Of course, Hiome Core is in beta and this documentation is subject to change. This page will always reflect your\n      Hiome Core's API.\n    </p>\n  </WhiteLayout>\n)\n\nexport default DocsPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport React from \"react\"\n\nconst Header = () => (\n  <header\n    style={{\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0, textAlign: `center` }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          Hiome\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nexport default Header\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}